# .github/workflows/deploy.yml
name: CI/CD to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout repository
      - uses: actions/checkout@v3

      # 2) Setup Python
      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'       # 필요에 따라 버전 변경 가능
          cache: 'pip'

      # 3) Install dependencies
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn


      # 5) Load SSH key for deployment
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 6) Add your EC2 host to known_hosts
      - name: Add EC2 host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      # 7) Rsync (or scp) 프로젝트 파일을 EC2로 복사
      - name: Sync project to EC2
        run: |
          rsync -avz --delete \
            --exclude='.git*' \
            --exclude='venv/' \
            --exclude='.env' \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ secrets.REMOTE_APP_PATH }}

      # 8) EC2에서 가상환경 재설치·마이그레이션·정적파일 수집·서비스 재시작
      - name: Deploy on EC2
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            set -e
            cd ${{ secrets.REMOTE_APP_PATH }}

            # (1) 가상환경 활성화 (혹은 새로 생성)
            if [ ! -d venv ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate

            # (2) 의존성 설치
            pip install --upgrade pip
            pip install -r requirements.txt

            # (3) 마이그레이션
            cd ${{ secrets.PROJECT_NAME }}
            python manage.py makemigrations
            python manage.py migrate --noinput

            # (4) Gunicorn / Nginx 재시작
            echo "▶ Gunicorn 재시작…"
            pkill -f 'gunicorn' || true
            gunicorn --bind 0.0.0.0:8000 ${{ secrets.PROJECT_NAME }}.wsgi:application --daemon
            
            
            echo "▶ Nginx 설정 문법 테스트…"
            sudo nginx -t
            echo "▶ Nginx 재시작…"
            sudo systemctl restart nginx

            exit
          EOF
